import base64
from datetime import datetime, timedelta

from django.conf import settings
from jose import jwt

from auth.exceptions import AuthenticationError


def get_setting(key):
    """ Get settings from settings.py.

    Args:
        key: A string representing the name of the setting.

    Returns:
        An object representing the configuration information about the given
        key.
    """
    auth_settings = getattr(settings, 'JWT_AUTH', None)
    return auth_settings.get(key)


def jwt_claims_builder(user):
    """ Builds claims using given user object.

    Args:
        user: A user object instantiated from User model.

    Returns:
        claims: A dict containing necessary information for JWT.
    """
    claims = {
        'username': str(base64.b64encode(bytes(user.username, 'utf-8')), 'utf-8'),
        # TODO(WanMok): settings: AUTH_EXPIRATION_TIME_DELTA
        'exp': datetime.utcnow() + timedelta(days=10),
        'iat': datetime.utcnow(),
        # TODO(WanMok): settings: AUTH_ISSUER
        'iss': 'EarlyBird'
    }

    return claims


def jwt_encode(claims):
    """ Encodes the claims to token.

    Args:
        claims: A dict generated by jwt_claims_builder(user).

    Returns:
        token: A string containing authentication information.
    """
    headers = {
        'alg': 'RS512',
        'typ': 'JWT'
    }

    # TODO(WanMok): settings: AUTH_PRIVATE_KEY
    with open('certs/jwt_private_key.pem', 'r') as f:
        key = f.read()

    token = jwt.encode(headers=headers,
                       claims=claims,
                       algorithm='RS512',
                       key=key)

    return token


def jwt_decode(token):
    """ Decodes the token and verify all its claims.

    Args:
        token: A string containing authentication information.

    Returns:
        claims: A dict containing verified claims of JWT.

    Raises:
        jwt.JWTError: If the signature is invalid in any way.
        jwt.ExpiredSignatureError: If the signature has expired.
        jwt.ClaimsError: If any claim is invalid in any way.
    """
    with open('certs/jwt_public_key.pem', 'r') as f:
        key = f.read()

    return jwt.decode(token=token,
                      key=key)


def jwt_get_username_from_claims(claims):
    username = claims.get('username')
    return None if username is None else str(base64.urlsafe_b64decode(username),
                                             'utf-8')


def jwt_get_token_from_info(info):
    """ Extracts token string from resolver's info.

    Args:
        info: A dict provided by resolver.
    Returns:
        token: A string representing JWT.
    """
    authorization = info.context.META.get('HTTP_AUTHORIZATION')
    if authorization is None:
        raise AuthenticationError('No token found.')

    payload = authorization.split()

    try:
        token = payload[1]
    except IndexError:
        raise AuthenticationError('Invalid token claims.')

    return token
