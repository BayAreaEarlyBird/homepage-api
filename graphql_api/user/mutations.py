import datetime

import graphene
from django.db import IntegrityError
from graphene import relay
from graphql import GraphQLError

from auth.decorators import token_required
from auth.exceptions import AuthenticationError
from user.services import create_user, authenticate_user, update_third_party_links


class CreateUser(relay.ClientIDMutation):
    """ Create a new user using the given username and password."""

    class Input:
        # Autogenerated input type of CreateUser.
        username = graphene.String(required=True)
        password = graphene.String(required=True)

    username = graphene.String()

    @staticmethod
    def mutate_and_get_payload(root, info, username, password):
        try:
            user = create_user(username, password)
        except ValueError as e:
            raise GraphQLError('Create user value error: %s' % e)
        except IntegrityError as e:
            raise GraphQLError('Create user integrity error: %s' % e)

        return CreateUser(username=user.username)


class AuthenticateUser(relay.ClientIDMutation):
    class Input:
        username = graphene.String(required=True)
        password = graphene.String(required=True)

    token = graphene.String(required=True)
    iat = graphene.DateTime()
    exp = graphene.DateTime()

    @staticmethod
    def mutate_and_get_payload(root, info, username, password):
        try:
            jwt, claims = authenticate_user(username,
                                            password)
        except AuthenticationError as e:
            raise GraphQLError('Failed to create token. %s' % e)

        return AuthenticateUser(token=jwt,
                                iat=datetime.datetime.fromtimestamp(claims.get('iat')),
                                exp=datetime.datetime.fromtimestamp(claims.get('exp')))


class UpdateThirdPartyLinks(relay.ClientIDMutation):
    """ Update third-party links bound to the user."""

    class Input:
        leetcode_url = graphene.String()
        github_url = graphene.String()
        blog_url = graphene.String()

    leetcode_url = graphene.String()
    github_url = graphene.String()
    blog_url = graphene.String()

    @staticmethod
    @token_required
    def mutate_and_get_payload(root, info,
                               leetcode_url=None,
                               github_url=None,
                               blog_url=None,
                               **kwargs):
        user = kwargs.get('user')
        try:
            update_third_party_links(user,
                                     leetcode_url,
                                     github_url,
                                     blog_url)
        except ValueError as e:
            raise GraphQLError('Create user value error: %s' % e)

        return UpdateThirdPartyLinks(leetcode_url=leetcode_url,
                                     github_url=github_url,
                                     blog_url=blog_url)


class Mutation(graphene.ObjectType):
    create_user = CreateUser.Field()
    authenticate_user = AuthenticateUser.Field()
    update_third_party_links = UpdateThirdPartyLinks.Field()
